#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>
#include <stdlib.h>

char NextLine = 10;
int MaxStringSize = 100;

int useless(char *str){
    int pause;
    char *argument=malloc(MaxStringSize);
    char *command=malloc(MaxStringSize),*p;        //выделили память
    pid_t pid;	                                   //Cоздаём переменную pid типа идентификатор процесса
    if((pid=fork())<0)                             //присвоили пиду ид процесса ребёнка, а если не удалось, то ОШИБКА    (форк присваивает себе значение ид процесса потомка)
    {                            
	   printf("%s\n","Can't create child process.");  
	   exit(-1);
    }
    if (pid>0) return 0;         
    pause=strtol(str,&p,10);            //Присвоили времени паузы значение указаное нами (строка в лонгинт(целевая строка, место р-место начала адреса команды, базис системы исчисления))
    sleep(pause);                       
    strcpy(command,p+1);                //копируем в строку comand из стр из места по указателю р+1
    int i = strlen(command)-1;          //длина строчки без символа завершения строки
    while(command[i] != '/')            //считае номер с которого начинается имя команды
    {         
        i--;
    }
    char kek[20];
    strncpy(kek, command, i);          //скопировали в кек часть команда начиная со слэша

    if(execl(command, kek, NULL)<0)    //Если команду выполнить невозможно, то ОШИБКА (кек-то из строчки, что мы должны выполнить)
    {
        printf("Error - %d", errno);
        printf("%s%s%s\n","Program ",command," failed to load.");
        exit(0);
    }
    exit(-1);
}
int main(){ 
    int file;                          //создали переменную под файл
    char c,*str,*cur;                  
    ssize_t size;
    if((file=open("Input.txt",O_RDONLY))<0)       //проверка можно ли открыть файл (на вход получаем файл со временем паузы и построчно с адресами команд
    {
    	    printf("%s\n","Can't open file!");
            exit(-1);
    }
    str=malloc(MaxStringSize);
    cur=str;
    size=1;
    while (size!=0)
	{
        size=read(file,&c,1);           //считывает 1 байт из файла, используя как буфер с
	if((c == NextLine)||(size==0))
		{ 	    
            		*cur=0;
           		 if(strlen(str)>0)
			{ 
		      		useless(str);
               		}
        		cur=str;
		}
	   		 else
			{
		  		*cur=c;
		  		cur++;
	    		}
	}    
    if(close(file)<0){
        printf("%s\n","Can't close file!");
	    exit(-1);
    }
}
